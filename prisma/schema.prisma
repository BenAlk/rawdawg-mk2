// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Hashed password for credentials provider
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  dogs          Dog[]       // Link user to their dogs
  mealPlans     MealPlan[]  // Link user to their meal plans
  foodItems     FoodItem[]  // Link user to their food items
  preferences   UserPreference?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  USER
}

model FoodItem {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  brand       String
  type        String
  weight      Decimal      @db.Decimal(10, 2)  // in grams or oz
  cost        Decimal      @db.Decimal(10, 2)  // in user's currency
  description String?
  imageUrl    String?
  isActive    Boolean      @default(true)

  // Nutritional information (optional)
  protein     Decimal?     @db.Decimal(10, 2)
  fat         Decimal?     @db.Decimal(10, 2)
  fiber       Decimal?     @db.Decimal(10, 2)

  // User ownership
  userId      String
  user        User         @relation(fields: [userId], references: [id])

  // Relationships
  mealPlanItems MealPlanItem[]

  @@index([brand, type])
  @@index([userId])
}

// Dogs the user is creating meal plans for
model Dog {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String
  weight      Decimal      @db.Decimal(10, 2)  // in kg or lbs
  age         Decimal      @db.Decimal(5, 2)   // in years
  activityLevel String     // e.g., Low, Moderate, High
  portionSize Decimal      @db.Decimal(10, 2)  // daily portion in grams or oz

  // User ownership
  userId      String
  user        User         @relation(fields: [userId], references: [id])

  // Relationships
  mealPlans   MealPlan[]

  @@index([userId])
}

// Saved meal plans
model MealPlan {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String
  startDate   DateTime?
  endDate     DateTime?
  durationDays Int
  mealsPerDay Int
  dogId       String?      // Optional: can be for a specific dog or generic
  totalCost   Decimal      @db.Decimal(10, 2)
  notes       String?

  // User ownership
  userId      String
  user        User         @relation(fields: [userId], references: [id])

  // Relationships
  dog         Dog?         @relation(fields: [dogId], references: [id])
  items       MealPlanItem[]

  @@index([dogId])
  @@index([userId])
}

// Individual food items within a meal plan
model MealPlanItem {
  id          String       @id @default(cuid())
  mealPlanId  String
  foodItemId  String
  quantityPerMeal Decimal  @db.Decimal(10, 2)  // grams or oz per meal
  totalQuantity   Decimal  @db.Decimal(10, 2)  // total for plan duration
  numberOfMeals   Int?     // Number of meals this food appears in

  // Relationships
  mealPlan    MealPlan     @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  foodItem    FoodItem     @relation(fields: [foodItemId], references: [id])

  @@index([mealPlanId])
  @@index([foodItemId])
}

// User settings and preferences
model UserPreference {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  weightUnit  String       @default("kg")     // kg or lbs
  measureUnit String       @default("g")      // g or oz
  currency    String       @default("GBP")
  defaultMealsPerDay Int   @default(2)
  theme       String       @default("light")

  // User relationship (one-to-one)
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}
